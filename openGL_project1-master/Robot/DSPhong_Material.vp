// ADS Point lighting Shader
// Vertex Shader
// Richard S. Wright Jr.
// OpenGL SuperBible
#version 430

layout(location = 0) in vec3 vPosition;//資料從load每個部位的obj整合到三個儲存不同資料的VBO中再搬過來
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal;

vec3 vLightPosition = vec3(0,10,50);//光源位置

uniform MatVP{//相機的矩陣
	mat4 View;
	mat4 Projection;
};
uniform mat4 Model;//相機的矩陣運算(從每個物體的local座標到相機視角最後遠近大小差異 : Projection*View*Model)

uniform vec3 viewPos;//計算specular需要使用到視角所在位置，在main.cpp中傳入

// Color to fragment program
out vec3 vVaryingNormal;
out vec3 vVaryingLightDir;
out vec2 UV;

//post-processing stuff
out vec3 viewDir;//傳到fragment shader
out vec3 vLight; // 光源在view matrix下的位置

void main(void) 
{ 
	mat4 MVP = Projection*View*Model;
	mat4 MV = View*Model;
	
    // Get surface normal in eye coordinates
	mat3 normalMatrix = mat3(MV);//normal matrix is MV matrix's 3*3 excluding 'w' 
    vVaryingNormal = normalMatrix * vertexNormal;//取得在view之下的法向量

    // Get vertex position in eye coordinates
    vec4 vPosition4 = MV * vec4(vPosition,1);
    vec3 vPosition3 = vPosition4.xyz / vPosition4.w;

    // Get vector to light source
    vVaryingLightDir = normalize(vLightPosition - vPosition3);//這是從光源到物件位置的向量

	UV = vertexUV; // 材質座標沒有更動

	viewDir = normalize(viewPos - vPosition); // 從物體到觀看點的向量
	vLight = vLightPosition;

    // Don't forget to transform the geometry!
    gl_Position = MVP * vec4(vPosition,1); // 使其以相機視角觀看物體
}
